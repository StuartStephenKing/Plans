#region Prolog

vNow = NumberToString( NOW );
fullFile = pDirectory | pElement | '.csv'; 
sourceView = pElement | vNow;

ASCIIOutput( pDirectory | pElement | '.log', pElement );


IF ( ViewExists ( pCube, sourceView ) = 1 );
   ViewDestroy ( pCube, sourceView );
ENDIF;
ViewCreate ( pCube, sourceView );

vIndex = 1;
dimension = TABDIM ( pCube, vIndex );
WHILE ( dimension @<> '' );
   vIndex = vIndex + 1;
   dimension = TABDIM ( pCube, vIndex );
   IF ( vIndex > 17 );
      PROCESSQUIT;
   ENDIF;
END;

dimensionCount = vIndex - 1;
vIndex = 1;
WHILE ( vIndex <= dimensionCount );
   currentDim = TABDIM ( pCube, vIndex );
   IF ( currentDim  @= pDimension);
        IF (SubsetExists ( currentDim, sourceView ) = 1 );
         SubsetDestroy ( currentDim, sourceView ); 
      ENDIF;
      SubsetCreate ( currentDim, sourceView );
      SubsetElementInsert( currentDim, sourceView, pElement, 1 );
      ViewSubsetAssign ( pCube, sourceView, currentDim, sourceView );
   ELSE;
      subset = '_temp_populate_cube_' | vNow;
      IF (SubsetExists ( currentDim, subset ) = 1 );
         SubsetDestroy ( currentDim, subset ); 
      ENDIF;
      SubsetCreate ( currentDim, subset );
      j = 1;
      WHILE ( j <= DIMSIZ (currentDim) );
         currentElement = DIMNM ( currentDim, j );
         IF ( ELLEV (currentDim, currentElement ) = 0);
            SubsetElementInsert (  currentDim, subset, currentElement, SubsetGetSize ( currentDim, subset ) + 1 );
         ENDIF;
         j = j + 1;
      END; 
   ViewSubsetAssign ( pCube, sourceView, currentDim, subset);
   ENDIF;
  vIndex = vIndex + 1;
END;

ViewExtractSkipZeroesSet ( pCube, sourceView, 0 );
ViewExtractSkipCalcsSet ( pCube, sourceView, 1);
ViewConstruct ( pCube, sourceView );

DataSourceType='VIEW';
DatasourceForServer=pCube;
DatasourceCubeview=sourceView;

#endregion
#region Data

vValue = NumberToString ( RAND * 100 );

IF ( dimensionCount = 2 );
   ASCIIOUTPUT ( fullFile, dim1, dim2, vValue );
ELSEIF ( dimensionCount = 3 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, vValue );
ELSEIF ( dimensionCount = 4 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, vValue );
ELSEIF ( dimensionCount = 5 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, vValue );
ELSEIF ( dimensionCount = 6 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, vValue );
ELSEIF ( dimensionCount = 7 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, vValue );
ELSEIF ( dimensionCount = 8 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, vValue );
ELSEIF ( dimensionCount = 9 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, vValue );
ELSEIF ( dimensionCount = 10);
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, vValue );
ELSEIF ( dimensionCount = 11 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, vValue );
ELSEIF ( dimensionCount = 12 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, vValue );
ELSEIF ( dimensionCount = 13 );
    ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, vValue );
ELSEIF ( dimensionCount = 14);
   ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, vValue );
ELSEIF ( dimensionCount = 15 );
   ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, vValue );
ELSEIF ( dimensionCount = 16 );
   ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, dim16, vValue );
ELSEIF ( dimensionCount = 17 );
  ASCIIOUTPUT ( fullFile, dim1, dim2, dim3, dim4, dim5, dim6, dim7, dim8, dim9, dim10, dim11, dim12, dim13, dim14, dim15, dim16, dim17, vValue );
ENDIF;

#endregion
#region Epilog

ExecuteProcess ( 'LoadRandomData.Worker.2', 'pCube', pCube, 'pFile', fullFile, 'pDirectory', pDirectory, 'pElement', pElement );
#endregion