#region Prolog

DatasourceASCIIQuoteCharacter = '';
vProcessName     = GetProcessName();
vNow           = TIMST ( NOW(), '\Y\m\d\h\i\s' );

vWorkerProcess  = 'LoadRandomData.Worker';
vDirectory     = '/LoadRandomData/' | pCube | '_' | vNow | '/';
queueDebugFile = vDirectory | 'queue_debug.log';

subsetName = 'splitSubset_' | vNow; 
IF ( SubsetExists ( pSplitDimension, subsetName ) = 1);
    SubsetDestroy ( pSplitDimension, subsetName );
ENDIF;
SubsetCreate ( pSplitDimension, subsetName, 1 );

elementIndex = 1;
WHILE ( elementIndex <= DIMSIZ ( pSplitDimension ) );
    IF ( ELLEV ( pSplitDimension, DIMNM ( pSplitDimension, elementIndex ) ) = 0  );
        SubsetElementInsert ( pSplitDimension, subsetName, DIMNM ( pSplitDimension, elementIndex ), SubsetGetSize ( pSplitDimension, subsetName) + 1);
    ENDIF;
    elementIndex = elementIndex + 1;
END;

elementCount = DIMSIZ ( pSplitDimension );
subsetIndexToQueue = 1;
jsonQueue = '[]';
completedCount = 0;

WHILE ( completedCount < SubsetGetSize ( pSplitDimension, subsetName ) );
    jsonQueueIndex = JsonSize ( jsonQueue ); 
    WHILE ( jsonQueueIndex > -1 );
        IF ( jsonQueueIndex > 0 );
            jobToCheck = JsonToString ( jsonQueue, jsonQueueIndex - 1);
            #ASCIIOUTPUT ( queueDebugFile, 'Checking job: ' | jobToCheck | ' from index ' | NumberToString ( jsonQueueIndex - 1 )  );
            jobStatus = GetJobStatus ( jobToCheck );
            IF ( jobStatus = ProcessExitNormal() % jobStatus = ProcessExitSeriousError() );
                ASCIIOUTPUT ( queueDebugFile, 'Removing job: ' | jobToCheck | ' from queue position ' | NumberToString( jsonQueueIndex - 1 ) );
                jsonQueue = JsonRemove ( jsonQueue, jsonQueueIndex - 1 );
                completedCount = completedCount + 1;
                ASCIIOUTPUT ( queueDebugFile, 'Completed ' | NumberToString( completedCount ) | ' jobs, ' | NumberToString ( SubsetGetSize ( pSplitDimension, subsetName ) - completedCount ) | ' jobs remaining' );
            ENDIF;
        ENDIF;
        jsonQueueIndex =jsonQueueIndex - 1;
    END;

    WHILE ( JsonSize ( jsonQueue ) < pQueueSize & subsetIndexToQueue <= SubsetGetSize ( pSplitDimension, subsetName ) );
        splitElement = SubsetGetElementName ( pSplitDimension, subsetName, subsetIndexToQueue );
        jobID        = RunProcess ( vWorkerProcess, 
                                   'pCube', pCube, 
                                   'pDimension', pSplitDimension, 
                                   'pElement', splitElement, 
                                   'pDirectory', vDirectory );
        addIndex = JsonSize ( jsonQueue );
        ASCIIOUTPUT ( queueDebugFile, 'Adding jobID to queue: ' | jobID | ' for slice: ' | splitElement | ' at JSON array index ' | NumberToString ( addIndex ) );
        jsonQueue = JsonAdd ( jsonQueue, addIndex, StringToJson( jobID ) );
        subsetIndexToQueue = subsetIndexToQueue + 1;
    END;
END;
ASCIIOUTPUT ( queueDebugFile, 'Completed all jobs' );

#endregion